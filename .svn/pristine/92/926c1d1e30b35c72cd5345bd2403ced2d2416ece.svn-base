package com.kapture.middleware.utils;

import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.kapture.middleware.DTOModels.KeyValue;
import com.kapture.middleware.DataModel.ApiRequestModel;
import com.kapture.middleware.DataModel.AuthEndPoints;
import com.kapture.middleware.DataModel.DataEndPoints;
import com.kapture.middleware.DataModel.SourceConf;
import com.kapture.middleware.DataModel.UserConf;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class RequestBuilderUtils {
	@Autowired
	ApiRequestModel rmod;
	
	public ApiRequestModel builder(AuthEndPoints auth, DataEndPoints dep, HashMap<String, String> user, String type) {
		
		MultiValueMap<String, String> value = new LinkedMultiValueMap<String, String>();
		
		if (type.equalsIgnoreCase("Auth")) {
				
			for (KeyValue temp : auth.getParams()) {
				if (temp.getValue().equalsIgnoreCase("codeValue")) {
					String tempval = user.get(temp.getKey());
					value.add(temp.getKey(), tempval);
				}
				else { 
					value.add(temp.getKey(), temp.getValue());}
			}
			rmod.setParams(value);
			return rmod;
		}
		else if (type.equalsIgnoreCase("Consume")) {
			for (KeyValue temp : dep.getParams()) {
				if (temp.getValue().equalsIgnoreCase("codeValue")) {
					String tempval = user.get(temp.getKey());
					value.add(temp.getKey(), tempval);
				}
				else { 
					value.add(temp.getKey(), temp.getValue());}
			}
			rmod.setParams(value);
			
			return rmod;
		}
		else {
			return rmod;
		}
		
	}

}
