package com.kapture.middleware.Scheduler;

import java.time.LocalDateTime;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.kapture.middleware.DataModel.Model;
import com.kapture.middleware.DataModel.ProcessedModel;
import com.kapture.middleware.DataModel.SourceConf;
import com.kapture.middleware.Repositories.ModelRepository;
import com.kapture.middleware.Repositories.ProcessedModelRepository;
import com.kapture.middleware.Repositories.SourceConfRepository;
import com.kapture.middleware.services.SourceConfService;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class PushScheduler {

	@Autowired
	MongoTemplate mongoTemplate;

	@Autowired
	SourceConfRepository sourceConfRepository;

	@Autowired
	ModelRepository modelRepository;

	@Autowired
	ProcessedModelRepository processedModelRepository;

	@Autowired
	SourceConfService sourceConfService;

	@Scheduled(fixedRate = 300000)
	public void scheduler() {

		LocalDateTime timeStamp = LocalDateTime.now();
		List<SourceConf> sourceConfList = sourceConfRepository.findAll();

		for (int i = 0; i < sourceConfList.size(); i++) {
			String url = sourceConfList.get(i).getKapoint();

			if (sourceConfList.get(i).getName().equalsIgnoreCase("Facebook")) {
				List<Model> modelList = modelRepository.deleteByTypeAndTimeLessThan(sourceConfList.get(i).getName(),
						timeStamp);
				JsonArray app = new JsonArray();

				if (modelList.size() > 0) {
					Gson gson = new Gson();

					for (int k = 0; k < modelList.size(); k++) {
						try {
							JsonParser parser = new JsonParser();
							// log.info("Data In Each Iteration"+modelList.get(k).getData());
							JsonElement ele = parser.parse(modelList.get(k).getData());
							JsonArray ar = ele.getAsJsonArray();

							app.addAll(ar);

						} catch (Exception e) {
							log.error("Error in Making Json Array", e);
						}

					}

					HttpResponse<String> rs = null;
					try {
						rs = Unirest.post(url).header("Authorization", "Basic YWRqZXR0ZXI6ZmFjZWJvb2s=")
								.header("Content-Type", "application/json").body(gson.toJson(app).toString())
								.asString();
					} catch (UnirestException e) {
						e.printStackTrace();
					}
					log.info("Size of Json Array Sent to Kapture " + app.size());
					log.info("Response Fetched From Kapture Server  " + rs.getBody());

					if (rs.getStatus() == 200) {

						for (int j = 0; j < modelList.size(); j++) {

							ProcessedModel processedModel = ProcessedModel.builder().type(modelList.get(j).getType())
									.data(modelList.get(j).getData()).time(modelList.get(j).getTime())
									.apikey(modelList.get(j).getApikey()).label(modelList.get(j).getLabel()).build();
							processedModelRepository.save(processedModel);
						}
					} else {
						for (int k = 0; k < modelList.size(); k++) {
							modelRepository.save(modelList.get(k));
						}
					}

				} else {
					log.info("Nothing is there for  " + sourceConfList.get(i).getName());
				}

			} else {
				List<Model> modelList = modelRepository.deleteByTypeAndTimeLessThan(sourceConfList.get(i).getName(),
						timeStamp);
				if (modelList.size() > 0) {
					String json = new Gson().toJson(modelList);
					HttpResponse<String> rs = null;
					try {
						rs = Unirest.post(url).header("Authorization", "Basic YWRqZXR0ZXI6ZmFjZWJvb2s=")
								.header("Content-Type", "application/json").body(json).asString();
					} catch (UnirestException e) {
						e.printStackTrace();
					}
					log.info("Size of Json Array Sent to Kapture " + modelList.size());
					log.info("Response Fetched From Kapture Server  " + rs.getBody());
					System.out.println(rs.getStatus());
					if (rs.getStatus() == 200) {
						for (int j = 0; j < modelList.size(); j++) {

							ProcessedModel processedModel = ProcessedModel.builder().type(modelList.get(j).getType())
									.data(modelList.get(j).getData()).time(modelList.get(j).getTime())
									.apikey(modelList.get(j).getApikey()).label(modelList.get(j).getLabel()).build();
							processedModelRepository.save(processedModel);
						}
					} else {
						for (int k = 0; k < modelList.size(); k++) {
							modelRepository.save(modelList.get(k));
						}

					}

				} else {
					log.info("Nothing is there for  " + sourceConfList.get(i).getName());
				}
			}
		}
	}
}