package com.kapture.middleware.utils;


import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.kapture.middleware.DTOModels.KeyValue;
import com.kapture.middleware.DataModel.ApiRequestModel;
import com.kapture.middleware.DataModel.AuthEndPoints;
import com.kapture.middleware.DataModel.DataEndPoints;
import com.kapture.middleware.DataModel.SourceConf;
import com.kapture.middleware.DataModel.UserConf;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class RequestBuilderUtils {
	@Autowired
	ApiRequestModel rmod;
	
	public ApiRequestModel builder(SourceConf sc,AuthEndPoints auth, DataEndPoints dep, HashMap<String, String> user, String type) {
		
		MultiValueMap<String, String> value = new LinkedMultiValueMap<String, String>();
		
		if (type.equalsIgnoreCase("Auth")) {
			
			if (sc.getName().equalsIgnoreCase("99acres")) {
				LinkedMultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
				for (KeyValue temp : auth.getRequestbody()) {
					if (temp.getValue().equalsIgnoreCase("codeValue")) {
						String tempval = user.get(temp.getKey());
						LocalDateTime now = LocalDateTime.now();
						DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
						String DateTime = now.format(formatter);
						String backtime = now.minusDays(2).format(formatter);
						tempval = tempval.replaceAll("(<start_date>)[^&]*(</start_date>)", "$1"+backtime+"$2");
						tempval = tempval.replaceAll("(<end_date>)[^&]*(</end_date>)", "$1"+DateTime+"$2");
						
						log.info("Tempval"+tempval);
						
						params.add(temp.getKey(),tempval);
					}
				    HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<>(params, headers);
					rmod.setRequestentity(requestEntity);
					return rmod;	
			}
			}
				
			for (KeyValue temp : auth.getParams()) {
				if (temp.getValue().equalsIgnoreCase("codeValue")) {
					String tempval = user.get(temp.getKey());
					value.add(temp.getKey(), tempval);
				}
				else { 
					value.add(temp.getKey(), temp.getValue());}
			}
			rmod.setParams(value);
			return rmod;
		}
		else if (type.equalsIgnoreCase("Consume")) {
			
			if (sc.getName().equalsIgnoreCase("99acres")) {
				LinkedMultiValueMap<String, Object> params = new LinkedMultiValueMap<>();
				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
				for (KeyValue temp : dep.getRequestbody()) {
					if (temp.getValue().equalsIgnoreCase("codeValue")) {
						String tempval = user.get(temp.getKey());
						LocalDateTime now = LocalDateTime.now();
						DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
						String DateTime = now.format(formatter);
						String backtime = now.minusDays(2).format(formatter);
						tempval = tempval.replaceAll("(<start_date>)[^&]*(</start_date>)", "$1"+backtime+"$2");
						tempval = tempval.replaceAll("(<end_date>)[^&]*(</end_date>)", "$1"+DateTime+"$2");
						
						params.add(temp.getKey(),tempval);
					}
				    HttpEntity<LinkedMultiValueMap<String, Object>> requestEntity = new HttpEntity<>(params, headers);
					rmod.setRequestentity(requestEntity);
					return rmod;	
			}
			}
			for (KeyValue temp : dep.getParams()) {
				if (temp.getValue().equalsIgnoreCase("codeValue")) {
					String tempval = user.get(temp.getKey());
					value.add(temp.getKey(), tempval);
				}
				else if (temp.getValue().equalsIgnoreCase("dbupdate")) {
					value.add(temp.getKey(), sc.getLastdatetime().toString());
				}
				else { 
					value.add(temp.getKey(), temp.getValue());}
			}
			
			rmod.setParams(value);
			
			return rmod;
		}
		return rmod;
		
	}

}
